!------------------------------------------------------------------------------!
! thermal diffusion
! alpha prescription
! no thermal conduction
pure subroutine mrx_coeff1_ad (z,Y,D,F,A,MY,MD)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
! first column: values, second column: 1ord derivatives
real(dp), dimension(:), intent(in) :: Y,D
! each row is one Function: its value and derivatives to rho and T
real(dp), dimension(:,:), intent(in) :: F
! right-hand-side of the equation
real(dp), dimension(:), intent(out) :: A
! jacobians with respect to Y and dY/dz
real(dp), dimension(:,:), intent(out) :: MY, MD
A(1) = -cgs_boltz*D(1)*Y(2)/(cgs_mhydr*miu) - cgs_boltz*D(2)*Y(1)/( &
      cgs_mhydr*miu) - omega**2*z*Y(1) + (F(1,1) + F(1,3))*Y(1)*Y(3)/ &
      cgs_c
A(2) = -16*cgs_stef*D(2)*Y(2)**3 - (3*F(1,1) + 3*F(1,3))*Y(1)*Y(3)
A(3) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0/ &
      3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha)) - D(3)
MY(1,1) = cgs_boltz*D(2)/(cgs_mhydr*miu) + omega**2*z - (F(1,1) + F(1,3 &
      ))*Y(3)/cgs_c - (F(2,1) + F(2,3))*Y(1)*Y(3)/cgs_c
MY(2,1) = (3*F(1,1) + 3*F(1,3))*Y(3) + (3*F(2,1) + 3*F(2,3))*Y(1)*Y(3)
MY(3,1) = -alpha*cgs_boltz*omega*Y(2)/(cgs_mhydr*miu)
MY(1,2) = cgs_boltz*D(1)/(cgs_mhydr*miu) - (F(3,1) + F(3,3))*Y(1)*Y(3)/ &
      cgs_c
MY(2,2) = 48*cgs_stef*D(2)*Y(2)**2 + (3*F(3,1) + 3*F(3,3))*Y(1)*Y(3)
MY(3,2) = -alpha*omega*(cgs_boltz*Y(1)/(cgs_mhydr*miu) + merge((16.0d0/ &
      3.0d0)*cgs_stef*Y(2)**3/cgs_c, 0.0d0, use_prad_in_alpha))
MY(1,3) = -(F(1,1) + F(1,3))*Y(1)/cgs_c
MY(2,3) = (3*F(1,1) + 3*F(1,3))*Y(1)
MY(3,3) = 0
MD(1,1) = cgs_boltz*Y(2)/(cgs_mhydr*miu)
MD(2,1) = 0
MD(3,1) = 0
MD(1,2) = cgs_boltz*Y(1)/(cgs_mhydr*miu)
MD(2,2) = 16*cgs_stef*Y(2)**3
MD(3,2) = 0
MD(1,3) = 0
MD(2,3) = 0
MD(3,3) = 1
end subroutine

pure subroutine mrx_coeffbl_ad (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = -Y(3)
MB(1,1) = 0
MB(1,2) = 0
MB(1,3) = 1
end subroutine

pure subroutine mrx_coeffbr_ad (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = facc - Y(3)
B(2) = 2*cgs_stef*Y(2)**4 - Y(3)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = -8*cgs_stef*Y(2)**3
MB(1,3) = 1
MB(2,3) = 1
end subroutine

pure subroutine mrx_output_ad (z,Y,YY)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:), intent(out) :: YY
YY(1) = Y(1)
YY(2) = Y(2)
YY(3) = Y(2)
YY(4) = cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu)
YY(5) = (4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c
YY(6) = 0
YY(7) = Y(3)
YY(8) = 0
YY(9) = 0
YY(10) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0 &
      /3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha))
YY(11) = omega*z*zeta
end subroutine

!------------------------------------------------------------------------------!
! thermal diffusion
! alpha prescription
! radiation + thermal conduction
pure subroutine mrx_coeff1_adt (z,Y,D,F,A,MY,MD)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
! first column: values, second column: 1ord derivatives
real(dp), dimension(:), intent(in) :: Y,D
! each row is one Function: its value and derivatives to rho and T
real(dp), dimension(:,:), intent(in) :: F
! right-hand-side of the equation
real(dp), dimension(:), intent(out) :: A
! jacobians with respect to Y and dY/dz
real(dp), dimension(:,:), intent(out) :: MY, MD
A(1) = -cgs_boltz*D(1)*Y(2)/(cgs_mhydr*miu) - cgs_boltz*D(2)*Y(1)/( &
      cgs_mhydr*miu) - omega**2*z*Y(1) + (F(1,1) + F(1,3))*Y(1)*Y(3)/ &
      cgs_c
A(2) = -16*cgs_stef*D(2)*Y(2)**3 - (3*F(1,1) + 3*F(1,3))*Y(1)*Y(3)
A(3) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0/ &
      3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha)) - D(3) &
      - D(4)
A(4) = -D(2)*F(1,4) - Y(4)
MY(1,1) = cgs_boltz*D(2)/(cgs_mhydr*miu) + omega**2*z - (F(1,1) + F(1,3 &
      ))*Y(3)/cgs_c - (F(2,1) + F(2,3))*Y(1)*Y(3)/cgs_c
MY(2,1) = (3*F(1,1) + 3*F(1,3))*Y(3) + (3*F(2,1) + 3*F(2,3))*Y(1)*Y(3)
MY(3,1) = -alpha*cgs_boltz*omega*Y(2)/(cgs_mhydr*miu)
MY(4,1) = D(2)*F(2,4)
MY(1,2) = cgs_boltz*D(1)/(cgs_mhydr*miu) - (F(3,1) + F(3,3))*Y(1)*Y(3)/ &
      cgs_c
MY(2,2) = 48*cgs_stef*D(2)*Y(2)**2 + (3*F(3,1) + 3*F(3,3))*Y(1)*Y(3)
MY(3,2) = -alpha*omega*(cgs_boltz*Y(1)/(cgs_mhydr*miu) + merge((16.0d0/ &
      3.0d0)*cgs_stef*Y(2)**3/cgs_c, 0.0d0, use_prad_in_alpha))
MY(4,2) = D(2)*F(3,4)
MY(1,3) = -(F(1,1) + F(1,3))*Y(1)/cgs_c
MY(2,3) = (3*F(1,1) + 3*F(1,3))*Y(1)
MY(3,3) = 0
MY(4,3) = 0
MY(1,4) = 0
MY(2,4) = 0
MY(3,4) = 0
MY(4,4) = 1
MD(1,1) = cgs_boltz*Y(2)/(cgs_mhydr*miu)
MD(2,1) = 0
MD(3,1) = 0
MD(4,1) = 0
MD(1,2) = cgs_boltz*Y(1)/(cgs_mhydr*miu)
MD(2,2) = 16*cgs_stef*Y(2)**3
MD(3,2) = 0
MD(4,2) = F(1,4)
MD(1,3) = 0
MD(2,3) = 0
MD(3,3) = 1
MD(4,3) = 0
MD(1,4) = 0
MD(2,4) = 0
MD(3,4) = 1
MD(4,4) = 0
end subroutine

pure subroutine mrx_coeffbl_adt (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = -Y(3)
B(2) = -Y(4)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = 0
MB(1,3) = 1
MB(2,3) = 0
MB(1,4) = 0
MB(2,4) = 1
end subroutine

pure subroutine mrx_coeffbr_adt (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = facc - Y(3) - Y(4)
B(2) = 2*cgs_stef*Y(2)**4 - Y(3)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = -8*cgs_stef*Y(2)**3
MB(1,3) = 1
MB(2,3) = 1
MB(1,4) = 1
MB(2,4) = 0
end subroutine

pure subroutine mrx_output_adt (z,Y,YY)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:), intent(out) :: YY
YY(1) = Y(1)
YY(2) = Y(2)
YY(3) = Y(2)
YY(4) = cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu)
YY(5) = (4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c
YY(6) = 0
YY(7) = Y(3)
YY(8) = 0
YY(9) = Y(4)
YY(10) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0 &
      /3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha))
YY(11) = omega*z*zeta
end subroutine

!------------------------------------------------------------------------------!
! thermal diffusion
! magnetic heating
! no thermal conduction
pure subroutine mrx_coeff1_md (z,Y,D,F,A,MY,MD)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
! first column: values, second column: 1ord derivatives
real(dp), dimension(:), intent(in) :: Y,D
! each row is one Function: its value and derivatives to rho and T
real(dp), dimension(:,:), intent(in) :: F
! right-hand-side of the equation
real(dp), dimension(:), intent(out) :: A
! jacobians with respect to Y and dY/dz
real(dp), dimension(:,:), intent(out) :: MY, MD
A(1) = -cgs_boltz*D(1)*Y(2)/(cgs_mhydr*miu) - cgs_boltz*D(2)*Y(1)/( &
      cgs_mhydr*miu) - omega**2*z*Y(1) - D(4) + (F(1,1) + F(1,3))*Y(1)* &
      Y(3)/cgs_c
A(2) = -16*cgs_stef*D(2)*Y(2)**3 - (3*F(1,1) + 3*F(1,3))*Y(1)*Y(3)
A(3) = -alpha*omega*(-2*nu*Y(4) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(4) - D(3)
A(4) = alpha*omega*(-nu*Y(4) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)) - omega*z*zeta*D(4) - 2*omega*zeta*Y(4)
MY(1,1) = cgs_boltz*D(2)/(cgs_mhydr*miu) + omega**2*z - (F(1,1) + F(1,3 &
      ))*Y(3)/cgs_c - (F(2,1) + F(2,3))*Y(1)*Y(3)/cgs_c
MY(2,1) = (3*F(1,1) + 3*F(1,3))*Y(3) + (3*F(2,1) + 3*F(2,3))*Y(1)*Y(3)
MY(3,1) = alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(4))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      4)))**2*Y(4)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(4)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(4,1) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(4))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      4)))**2*Y(4)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(4)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(1,2) = cgs_boltz*D(1)/(cgs_mhydr*miu) - (F(3,1) + F(3,3))*Y(1)*Y(3)/ &
      cgs_c
MY(2,2) = 48*cgs_stef*D(2)*Y(2)**2 + (3*F(3,1) + 3*F(3,3))*Y(1)*Y(3)
MY(3,2) = alpha*omega*((cgs_boltz*Y(1)/(cgs_mhydr*miu) + merge((16.0d0/ &
      3.0d0)*cgs_stef*Y(2)**3/cgs_c, 0.0d0, use_prad_in_alpha))*merge( &
      1.0/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0 &
      )*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)* &
      miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(4)))) + 1), 1.0d0, use_quench_mri) + ( &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)* &
      cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha) + Y(4))*merge &
      (((-8*sqrt(cgs_boltz)/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw*sqrt(Y(2))) + 8*cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(4)))/(2* &
      sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4))) + 4*( &
      -sqrt(cgs_boltz)/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw* &
      sqrt(Y(2))) - cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(4)))*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))**2)*exp(( &
      16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, &
      use_quench_mri))
MY(4,2) = -alpha*omega*((cgs_boltz*Y(1)/(cgs_mhydr*miu) + merge((16.0d0/ &
      3.0d0)*cgs_stef*Y(2)**3/cgs_c, 0.0d0, use_prad_in_alpha))*merge( &
      1.0/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0 &
      )*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)* &
      miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(4)))) + 1), 1.0d0, use_quench_mri) + ( &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)* &
      cgs_stef*Y(2)**4/cgs_c, 0.0d0, use_prad_in_alpha) + Y(4))*merge &
      (((-8*sqrt(cgs_boltz)/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw*sqrt(Y(2))) + 8*cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(4)))/(2* &
      sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4))) + 4*( &
      -sqrt(cgs_boltz)/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw* &
      sqrt(Y(2))) - cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(4)))*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))**2)*exp(( &
      16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, &
      use_quench_mri))
MY(1,3) = -(F(1,1) + F(1,3))*Y(1)/cgs_c
MY(2,3) = (3*F(1,1) + 3*F(1,3))*Y(1)
MY(3,3) = 0
MY(4,3) = 0
MY(1,4) = 0
MY(2,4) = 0
MY(3,4) = alpha*omega*(-2*nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))** &
      2*Y(4)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(4)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)) - 2*omega*zeta
MY(4,4) = -alpha*omega*(-nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))** &
      2*Y(4)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))*Y(4)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(4))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta
MD(1,1) = cgs_boltz*Y(2)/(cgs_mhydr*miu)
MD(2,1) = 0
MD(3,1) = 0
MD(4,1) = 0
MD(1,2) = cgs_boltz*Y(1)/(cgs_mhydr*miu)
MD(2,2) = 16*cgs_stef*Y(2)**3
MD(3,2) = 0
MD(4,2) = 0
MD(1,3) = 0
MD(2,3) = 0
MD(3,3) = 1
MD(4,3) = 0
MD(1,4) = 1
MD(2,4) = 0
MD(3,4) = 0
MD(4,4) = omega*z*zeta
end subroutine

pure subroutine mrx_coeffbl_md (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = -Y(3)
B(2) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) - nu*Y(4) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4)) - 2*omega*zeta*Y(4)
MB(1,1) = 0
MB(2,1) = -alpha*cgs_boltz*omega*Y(2)/(cgs_mhydr*miu)
MB(1,2) = 0
MB(2,2) = -alpha*omega*(cgs_boltz*Y(1)/(cgs_mhydr*miu) + merge((16.0d0/ &
      3.0d0)*cgs_stef*Y(2)**3/cgs_c, 0.0d0, use_prad_in_alpha))
MB(1,3) = 1
MB(2,3) = 0
MB(1,4) = 0
MB(2,4) = -alpha*omega*(-nu + 1) + 2*omega*zeta
end subroutine

pure subroutine mrx_coeffbr_md (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = facc - 2*omega*z*zeta*Y(4) - Y(3)
B(2) = 2*cgs_stef*Y(2)**4 - Y(3)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = -8*cgs_stef*Y(2)**3
MB(1,3) = 1
MB(2,3) = 1
MB(1,4) = 2*omega*z*zeta
MB(2,4) = 0
end subroutine

pure subroutine mrx_output_md (z,Y,YY)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:), intent(out) :: YY
YY(1) = Y(1)
YY(2) = Y(2)
YY(3) = Y(2)
YY(4) = cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu)
YY(5) = (4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c
YY(6) = Y(4)
YY(7) = Y(3)
YY(8) = 2*omega*z*zeta*Y(4)
YY(9) = 0
YY(10) = -alpha*omega*(-2*nu*Y(4) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu &
      ) + merge((4.0d0/3.0d0)*cgs_stef*Y(2)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(4))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(4)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(4)
YY(11) = omega*z*zeta
end subroutine

!------------------------------------------------------------------------------!
! heating-cooling balance (compton term only)
! magnetic heating
! no thermal conduction
pure subroutine mrx_coeff1_mw (z,Y,D,F,A,MY,MD)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
! first column: values, second column: 1ord derivatives
real(dp), dimension(:), intent(in) :: Y,D
! each row is one Function: its value and derivatives to rho and T
real(dp), dimension(:,:), intent(in) :: F
! right-hand-side of the equation
real(dp), dimension(:), intent(out) :: A
! jacobians with respect to Y and dY/dz
real(dp), dimension(:,:), intent(out) :: MY, MD
A(1) = -cgs_boltz*D(1)*Y(2)/(cgs_mhydr*miu) - cgs_boltz*D(2)*Y(1)/( &
      cgs_mhydr*miu) - omega**2*z*Y(1) - D(5) + (F(1,1) + F(1,3))*Y(1)* &
      Y(4)/cgs_c
A(2) = -16*cgs_stef*D(3)*Y(3)**3 - (3*F(1,1) + 3*F(1,3))*Y(1)*Y(4)
A(3) = -alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(5) - D(4)
A(4) = alpha*omega*(-nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) - omega*z*zeta*D(5) - 2*omega*zeta*Y(5)
MY(1,1) = cgs_boltz*D(2)/(cgs_mhydr*miu) + omega**2*z - (F(1,1) + F(1,3 &
      ))*Y(4)/cgs_c - (F(2,1) + F(2,3))*Y(1)*Y(4)/cgs_c
MY(2,1) = (3*F(1,1) + 3*F(1,3))*Y(4) + (3*F(2,1) + 3*F(2,3))*Y(1)*Y(4)
MY(3,1) = alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(4,1) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(1,2) = cgs_boltz*D(1)/(cgs_mhydr*miu) - (F(3,1) + F(3,3))*Y(1)*Y(4)/ &
      cgs_c
MY(2,2) = (3*F(3,1) + 3*F(3,3))*Y(1)*Y(4)
MY(3,2) = alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri))
MY(4,2) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri))
MY(1,3) = 0
MY(2,3) = 48*cgs_stef*D(3)*Y(3)**2
MY(3,3) = alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, 0.0d0 &
      , use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)
MY(4,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)
MY(1,4) = -(F(1,1) + F(1,3))*Y(1)/cgs_c
MY(2,4) = (3*F(1,1) + 3*F(1,3))*Y(1)
MY(3,4) = 0
MY(4,4) = 0
MY(1,5) = 0
MY(2,5) = 0
MY(3,5) = alpha*omega*(-2*nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) - 2*omega*zeta
MY(4,5) = -alpha*omega*(-nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta
MD(1,1) = cgs_boltz*Y(2)/(cgs_mhydr*miu)
MD(2,1) = 0
MD(3,1) = 0
MD(4,1) = 0
MD(1,2) = cgs_boltz*Y(1)/(cgs_mhydr*miu)
MD(2,2) = 0
MD(3,2) = 0
MD(4,2) = 0
MD(1,3) = 0
MD(2,3) = 16*cgs_stef*Y(3)**3
MD(3,3) = 0
MD(4,3) = 0
MD(1,4) = 0
MD(2,4) = 0
MD(3,4) = 1
MD(4,4) = 0
MD(1,5) = 1
MD(2,5) = 0
MD(3,5) = 0
MD(4,5) = omega*z*zeta
end subroutine

pure subroutine mrx_coeff0_mw (z,Y,F,C,MC)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: C
real(dp), dimension(:,:), intent(out) :: MC
C(1) = alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 16*cgs_boltz*cgs_stef*(merge(sqrt(16* &
      cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, &
      use_precise_balance)*Y(2) - Y(3))*F(1,3)*Y(1)*Y(3)**4/(cgs_c**2* &
      cgs_mel) - 2*omega*zeta*Y(5)
MC(1,1) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      )) - 16*cgs_boltz*cgs_stef*(merge(sqrt(16*cgs_boltz**2*Y(2)**2/( &
      cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance)*Y(2) - Y(3 &
      ))*F(1,3)*Y(3)**4/(cgs_c**2*cgs_mel) - 16*cgs_boltz*cgs_stef*( &
      merge(sqrt(16*cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), &
      1.0d0, use_precise_balance)*Y(2) - Y(3))*F(2,3)*Y(1)*Y(3)**4/( &
      cgs_c**2*cgs_mel)
MC(1,2) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri)) - 16*cgs_boltz*cgs_stef*( &
      merge(16*cgs_boltz**2*Y(2)/(cgs_c**4*cgs_mel**2*sqrt(16*cgs_boltz &
      **2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1)), 0.0d0, &
      use_precise_balance)*Y(2) + merge(sqrt(16*cgs_boltz**2*Y(2)**2/( &
      cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance))*F(1,3)*Y( &
      1)*Y(3)**4/(cgs_c**2*cgs_mel) - 16*cgs_boltz*cgs_stef*(merge(sqrt &
      (16*cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, &
      use_precise_balance)*Y(2) - Y(3))*F(3,3)*Y(1)*Y(3)**4/(cgs_c**2* &
      cgs_mel)
MC(1,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri) - 64*cgs_boltz*cgs_stef*(merge(sqrt(16* &
      cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, &
      use_precise_balance)*Y(2) - Y(3))*F(1,3)*Y(1)*Y(3)**3/(cgs_c**2* &
      cgs_mel) + 16*cgs_boltz*cgs_stef*F(1,3)*Y(1)*Y(3)**4/(cgs_c**2* &
      cgs_mel)
MC(1,4) = 0
MC(1,5) = -alpha*omega*(-2*nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta
end subroutine

pure subroutine mrx_coeffbl_mw (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = -Y(4)
B(2) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) - nu*Y(5) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5)) - 2*omega*zeta*Y(5)
MB(1,1) = 0
MB(2,1) = -alpha*cgs_boltz*omega*Y(2)/(cgs_mhydr*miu)
MB(1,2) = 0
MB(2,2) = -alpha*cgs_boltz*omega*Y(1)/(cgs_mhydr*miu)
MB(1,3) = 0
MB(2,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)
MB(1,4) = 1
MB(2,4) = 0
MB(1,5) = 0
MB(2,5) = -alpha*omega*(-nu + 1) + 2*omega*zeta
end subroutine

pure subroutine mrx_coeffbr_mw (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = facc - 2*omega*z*zeta*Y(5) - Y(4)
B(2) = 2*cgs_stef*Y(3)**4 - Y(4)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = 0
MB(1,3) = 0
MB(2,3) = -8*cgs_stef*Y(3)**3
MB(1,4) = 1
MB(2,4) = 1
MB(1,5) = 2*omega*z*zeta
MB(2,5) = 0
end subroutine

pure subroutine mrx_output_mw (z,Y,YY)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:), intent(out) :: YY
YY(1) = Y(1)
YY(2) = Y(2)
YY(3) = Y(3)
YY(4) = cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu)
YY(5) = (4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c
YY(6) = Y(5)
YY(7) = Y(4)
YY(8) = 2*omega*z*zeta*Y(5)
YY(9) = 0
YY(10) = -alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu &
      ) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(5)
YY(11) = omega*z*zeta
end subroutine

!------------------------------------------------------------------------------!
! heating-cooling balance (full equation)
! magnetic heating
! no thermal conduction
pure subroutine mrx_coeff1_mc (z,Y,D,F,A,MY,MD)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
! first column: values, second column: 1ord derivatives
real(dp), dimension(:), intent(in) :: Y,D
! each row is one Function: its value and derivatives to rho and T
real(dp), dimension(:,:), intent(in) :: F
! right-hand-side of the equation
real(dp), dimension(:), intent(out) :: A
! jacobians with respect to Y and dY/dz
real(dp), dimension(:,:), intent(out) :: MY, MD
A(1) = -cgs_boltz*D(1)*Y(2)/(cgs_mhydr*miu) - cgs_boltz*D(2)*Y(1)/( &
      cgs_mhydr*miu) - omega**2*z*Y(1) - D(5) + (F(1,1) + F(1,3))*Y(1)* &
      Y(4)/cgs_c
A(2) = -16*cgs_stef*D(3)*Y(3)**3 - (3*F(1,1) + 3*F(1,3))*Y(1)*Y(4)
A(3) = -alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(5) - D(4)
A(4) = alpha*omega*(-nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) - omega*z*zeta*D(5) - 2*omega*zeta*Y(5)
MY(1,1) = cgs_boltz*D(2)/(cgs_mhydr*miu) + omega**2*z - (F(1,1) + F(1,3 &
      ))*Y(4)/cgs_c - (F(2,1) + F(2,3))*Y(1)*Y(4)/cgs_c
MY(2,1) = (3*F(1,1) + 3*F(1,3))*Y(4) + (3*F(2,1) + 3*F(2,3))*Y(1)*Y(4)
MY(3,1) = alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(4,1) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      ))
MY(1,2) = cgs_boltz*D(1)/(cgs_mhydr*miu) - (F(3,1) + F(3,3))*Y(1)*Y(4)/ &
      cgs_c
MY(2,2) = (3*F(3,1) + 3*F(3,3))*Y(1)*Y(4)
MY(3,2) = alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri))
MY(4,2) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri))
MY(1,3) = 0
MY(2,3) = 48*cgs_stef*D(3)*Y(3)**2
MY(3,3) = alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, 0.0d0 &
      , use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)
MY(4,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)
MY(1,4) = -(F(1,1) + F(1,3))*Y(1)/cgs_c
MY(2,4) = (3*F(1,1) + 3*F(1,3))*Y(1)
MY(3,4) = 0
MY(4,4) = 0
MY(1,5) = 0
MY(2,5) = 0
MY(3,5) = alpha*omega*(-2*nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) - 2*omega*zeta
MY(4,5) = -alpha*omega*(-nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta
MD(1,1) = cgs_boltz*Y(2)/(cgs_mhydr*miu)
MD(2,1) = 0
MD(3,1) = 0
MD(4,1) = 0
MD(1,2) = cgs_boltz*Y(1)/(cgs_mhydr*miu)
MD(2,2) = 0
MD(3,2) = 0
MD(4,2) = 0
MD(1,3) = 0
MD(2,3) = 16*cgs_stef*Y(3)**3
MD(3,3) = 0
MD(4,3) = 0
MD(1,4) = 0
MD(2,4) = 0
MD(3,4) = 1
MD(4,4) = 0
MD(1,5) = 1
MD(2,5) = 0
MD(3,5) = 0
MD(4,5) = omega*z*zeta
end subroutine

pure subroutine mrx_coeff0_mc (z,Y,F,C,MC)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: C
real(dp), dimension(:,:), intent(out) :: MC
C(1) = alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 4*cgs_stef*(4*cgs_boltz*(merge(sqrt(16* &
      cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, &
      use_precise_balance)*Y(2) - Y(3))*F(1,3)*Y(3)**4/(cgs_c**2* &
      cgs_mel) + (Y(2)**4 - Y(3)**4)*F(1,2))*Y(1) - 2*omega*zeta*Y(5)
MC(1,1) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(2)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge((-4*cgs_boltz*(-4*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + 2*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(2)/( &
      cgs_mhydr*miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt &
      (miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y( &
      5)))**2*Y(5)) + 8*cgs_boltz*Y(2)/(cgs_mhydr*miu*(2*sqrt(cgs_boltz &
      )*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)))*exp((16.0d0*sqrt &
      (cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      ))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y( &
      2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz &
      *Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, use_quench_mri &
      )) - 4*cgs_stef*(4*cgs_boltz*(merge(sqrt(16*cgs_boltz**2*Y(2)**2/ &
      (cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance)*Y(2) - Y( &
      3))*F(1,3)*Y(3)**4/(cgs_c**2*cgs_mel) + (Y(2)**4 - Y(3)**4)*F(1,2 &
      )) - 4*cgs_stef*(4*cgs_boltz*(merge(sqrt(16*cgs_boltz**2*Y(2)**2/ &
      (cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance)*Y(2) - Y( &
      3))*F(2,3)*Y(3)**4/(cgs_c**2*cgs_mel) + (Y(2)**4 - Y(3)**4)*F(2,2 &
      ))*Y(1)
MC(1,2) = -alpha*omega*(cgs_boltz*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)*Y(1)/(cgs_mhydr*miu) + (cgs_boltz*Y(1)*Y(2 &
      )/(cgs_mhydr*miu) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, &
      0.0d0, use_prad_in_alpha) + Y(5))*merge(((-8*sqrt(cgs_boltz)/( &
      sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) + 8* &
      cgs_boltz*Y(1)/(cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2 &
      ))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1 &
      )*Y(2)/(cgs_mhydr*miu*Y(5))) + 4*(-sqrt(cgs_boltz)/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw*sqrt(Y(2))) - cgs_boltz*Y &
      (1)/(cgs_mhydr*miu*Y(5)))*(-4*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2*cgs_boltz*Y(1)*Y(2)/ &
      (cgs_mhydr*miu*Y(5)))/(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt( &
      cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5)))**2)*exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/( &
      2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2 &
      ))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5 &
      )))) + 1)**2, 0.0d0, use_quench_mri)) - 4*cgs_stef*(4*cgs_boltz*( &
      merge(16*cgs_boltz**2*Y(2)/(cgs_c**4*cgs_mel**2*sqrt(16*cgs_boltz &
      **2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1)), 0.0d0, &
      use_precise_balance)*Y(2) + merge(sqrt(16*cgs_boltz**2*Y(2)**2/( &
      cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance))*F(1,3)*Y( &
      3)**4/(cgs_c**2*cgs_mel) + 4*cgs_boltz*(merge(sqrt(16*cgs_boltz** &
      2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, use_precise_balance) &
      *Y(2) - Y(3))*F(3,3)*Y(3)**4/(cgs_c**2*cgs_mel) + (Y(2)**4 - Y(3) &
      **4)*F(3,2) + 4*F(1,2)*Y(2)**3)*Y(1)
MC(1,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri) - 4*cgs_stef*(16*cgs_boltz*(merge(sqrt(16* &
      cgs_boltz**2*Y(2)**2/(cgs_c**4*cgs_mel**2) + 1), 1.0d0, &
      use_precise_balance)*Y(2) - Y(3))*F(1,3)*Y(3)**3/(cgs_c**2* &
      cgs_mel) - 4*cgs_boltz*F(1,3)*Y(3)**4/(cgs_c**2*cgs_mel) - 4*F(1, &
      2)*Y(3)**3)*Y(1)
MC(1,4) = 0
MC(1,5) = -alpha*omega*(-2*nu + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge((4*cgs_boltz*(-4*sqrt(cgs_boltz) &
      *sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius*rschw) + 2* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(1)*Y(2)/(cgs_mhydr* &
      miu*(2*sqrt(cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)* &
      omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))** &
      2*Y(5)**2) - 8*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*(2*sqrt( &
      cgs_boltz)*sqrt(Y(2))/(sqrt(cgs_mhydr)*sqrt(miu)*omega*radius* &
      rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))*Y(5)**2))*exp &
      ((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y &
      (2))/(omega*radius*rschw) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr* &
      miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**( &
      -0.5d0)*sqrt(Y(2))/(omega*radius*rschw) + cgs_boltz*Y(1)*Y(2)/( &
      cgs_mhydr*miu*Y(5))))/(exp((16.0d0*sqrt(cgs_boltz)*cgs_mhydr**( &
      -0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw) - 8.0d0* &
      cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1)**2, 0.0d0, &
      use_quench_mri) + merge(1.0/(exp((16.0d0*sqrt(cgs_boltz)* &
      cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta
end subroutine

pure subroutine mrx_coeffbl_mc (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = -Y(4)
B(2) = alpha*omega*(cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu) - nu*Y(5) + &
      merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5)) - 2*omega*zeta*Y(5)
MB(1,1) = 0
MB(2,1) = -alpha*cgs_boltz*omega*Y(2)/(cgs_mhydr*miu)
MB(1,2) = 0
MB(2,2) = -alpha*cgs_boltz*omega*Y(1)/(cgs_mhydr*miu)
MB(1,3) = 0
MB(2,3) = -alpha*omega*merge((16.0d0/3.0d0)*cgs_stef*Y(3)**3/cgs_c, &
      0.0d0, use_prad_in_alpha)
MB(1,4) = 1
MB(2,4) = 0
MB(1,5) = 0
MB(2,5) = -alpha*omega*(-nu + 1) + 2*omega*zeta
end subroutine

pure subroutine mrx_coeffbr_mc (z,Y,F,B,MB)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:,:), intent(in) :: F
real(dp), dimension(:), intent(out) :: B
real(dp), dimension(:,:), intent(out) :: MB
B(1) = facc - 2*omega*z*zeta*Y(5) - Y(4)
B(2) = 2*cgs_stef*Y(3)**4 - Y(4)
MB(1,1) = 0
MB(2,1) = 0
MB(1,2) = 0
MB(2,2) = 0
MB(1,3) = 0
MB(2,3) = -8*cgs_stef*Y(3)**3
MB(1,4) = 1
MB(2,4) = 1
MB(1,5) = 2*omega*z*zeta
MB(2,5) = 0
end subroutine

pure subroutine mrx_output_mc (z,Y,YY)
use iso_fortran_env, only: dp => real64
implicit none
real(dp), intent(in) :: z
real(dp), dimension(:), intent(in) :: Y
real(dp), dimension(:), intent(out) :: YY
YY(1) = Y(1)
YY(2) = Y(2)
YY(3) = Y(3)
YY(4) = cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu)
YY(5) = (4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c
YY(6) = Y(5)
YY(7) = Y(4)
YY(8) = 2*omega*z*zeta*Y(5)
YY(9) = 0
YY(10) = -alpha*omega*(-2*nu*Y(5) + (cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu &
      ) + merge((4.0d0/3.0d0)*cgs_stef*Y(3)**4/cgs_c, 0.0d0, &
      use_prad_in_alpha) + Y(5))*merge(1.0/(exp((16.0d0*sqrt(cgs_boltz) &
      *cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega*radius*rschw &
      ) - 8.0d0*cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))/(2.0d0*sqrt( &
      cgs_boltz)*cgs_mhydr**(-0.5d0)*miu**(-0.5d0)*sqrt(Y(2))/(omega* &
      radius*rschw) + cgs_boltz*Y(1)*Y(2)/(cgs_mhydr*miu*Y(5)))) + 1), &
      1.0d0, use_quench_mri)) + 2*omega*zeta*Y(5)
YY(11) = omega*z*zeta
end subroutine

